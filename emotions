import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout
from transformers import pipeline
import cv2

def emotion_recognition_from_text():
    # Use a pre-trained model for sentiment analysis
    nlp = pipeline("sentiment-analysis")
    
    def analyze_emotion(text):
        result = nlp(text)[0]
        emotion = "positive" if result['label'] == "POSITIVE" else "negative"
        return emotion, result['score']
    
    return analyze_emotion

def emotion_recognition_from_image():
    # Here's a simple CNN model for facial recognition and emotion
    model = Sequential([
        LSTM(64, return_sequences=True, input_shape=(48, 48, 1)),
        Dropout(0.5),
        LSTM(32),
        Dropout(0.5),
        Dense(7, activation='softmax')
    ])
    
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    
    # Assumption: We have loaded a pre-trained model
    # This is just a placeholder; you would need to train or load a model
    model.load_weights('path_to_pretrained_weights.h5')
    
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    
    def process_image(image_path):
        img = cv2.imread(image_path)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)
        
        for (x,y,w,h) in faces:
            roi_gray = gray[y:y+h, x:x+w]
            roi_gray = cv2.resize(roi_gray, (48, 48))
            roi_gray = roi_gray.astype('float') / 255.0
            roi_gray = np.expand_dims(roi_gray, axis=0)
            roi_gray = np.expand_dims(roi_gray, axis=-1)
            
            prediction = model.predict(roi_gray)
            emotion_label = np.argmax(prediction)
            emotions = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']
            return emotions[emotion_label]
    
    return process_image

# Example usage
text_analyzer = emotion_recognition_from_text()
image_analyzer = emotion_recognition_from_image()

# Example for text analysis
text_emotion, confidence = text_analyzer("I am very happy today!")
print(f"Text Emotion: {text_emotion}, Confidence: {confidence}")

# Example for image analysis
# Assuming 'example_image.jpg' exists in your directory
image_emotion = image_analyzer('example_image.jpg')
print(f"Image Emotion: {image_emotion}")
